// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Filter /> Should render and match the snapshot 1`] = `
<WithStyles(ForwardRef(Dialog))>
  <WithStyles(ForwardRef(DialogTitle))>
    Filter
  </WithStyles(ForwardRef(DialogTitle))>
  <WithStyles(ForwardRef(DialogContent))>
    <div>
      <WithStyles(ForwardRef(FormControl))
        fullWidth={true}
      >
        <WithStyles(ForwardRef(InputLabel))
          id="demo-simple-select-label"
        >
          Room Name
        </WithStyles(ForwardRef(InputLabel))>
        <WithStyles(ForwardRef(Select))
          id="demo-simple-select"
          label="Room"
          labelId="demo-simple-select-label"
          onChange={[Function]}
        >
          <WithStyles(ForwardRef(MenuItem))
            key="-1"
            value=""
          >
            All
          </WithStyles(ForwardRef(MenuItem))>
          <WithStyles(ForwardRef(MenuItem))
            key="0"
          />
        </WithStyles(ForwardRef(Select))>
      </WithStyles(ForwardRef(FormControl))>
    </div>
    <div
      className="filter-div"
    >
      <MuiPickersUtilsProvider
        utils={[Function]}
      >
        <PickerWithState
          InputAdornmentProps={
            Object {
              "position": "start",
            }
          }
          allowKeyboardControl={true}
          autoOk={true}
          format="MM/dd/yyyy"
          inputVariant="outlined"
          invalidDateMessage="Invalid Date Format"
          label="Select Date"
          maxDate={2100-01-01T00:00:00.000Z}
          maxDateMessage="Date should not be after maximal date"
          minDate={1900-01-01T00:00:00.000Z}
          minDateMessage="Date should not be before minimal date"
          onChange={[Function]}
          openTo="date"
          value={Date { NaN }}
          variant="inline"
          views={
            Array [
              "year",
              "date",
            ]
          }
        />
      </MuiPickersUtilsProvider>
    </div>
    <div
      className="filter-div"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "startAdornment": <ForwardRef(WithStyles)
              position="start"
            >
              <UNDEFINED />
            </ForwardRef(WithStyles)>,
          }
        }
        id="host"
        label="Host"
        onBlur={[Function]}
        variant="standard"
      />
    </div>
    <div
      className="filter-div"
    >
      <WithStyles(ForwardRef(TextField))
        InputProps={
          Object {
            "startAdornment": <ForwardRef(WithStyles)
              position="start"
            >
              <UNDEFINED />
            </ForwardRef(WithStyles)>,
          }
        }
        id="guest"
        label="Guest"
        onBlur={[Function]}
        variant="standard"
      />
    </div>
  </WithStyles(ForwardRef(DialogContent))>
  <WithStyles(ForwardRef(DialogActions))>
    <WithStyles(ForwardRef(Button))
      onClick={[Function]}
    >
      Reset
    </WithStyles(ForwardRef(Button))>
    <WithStyles(ForwardRef(Button))
      onClick={[Function]}
    >
      Apply
    </WithStyles(ForwardRef(Button))>
  </WithStyles(ForwardRef(DialogActions))>
</WithStyles(ForwardRef(Dialog))>
`;
